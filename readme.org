#+title: DERP: Deep recursive parameter estimation
#+author: Alexander E. Zarebski

This repository contains the code to simulate a database of
phylogenetic trees that will be used in a machine learning project in
which a neural network will be trained to solve phylodynamics
problems.

* Roadmap

- [-] Provide a single database file and some helper functions to read
  trees out and their associated metadata.
  + [-] There should be a bunch of visualisation so that we can get a
    feel for if the parameters of the simulation are at all plausible.
    * [X] Visualisation of change points
    * [X] Histogram of the last sequenced sample time
    * [ ] Histogram of prevalence
    * [ ] Histogram of cumulative infections
  + [X] There should be a file to specify the conda environment used
    and instructions on how to recreate this.
  + [X] Establish the prior distribution to draw simulation parameters
    from, these will need to be sufficiently large to cover the range
    of plausible values for the use cases.
  + [X] This should be robust to failed simulations and include basic
    metadata of the simulation such as the dataset size and the date
    it was created.
  + [ ] Rename =main.py= to =simulate.py= or something similar for
    clarity.
  + [ ] Document how to use the database file.
    * [ ] There should be a helper function which explains how to read
      trees and their corresponding record out.

* Usage

** Configuring a simulation

There are some example configurations provided:

- [[file:./config/debugging.json][debugging]]
- [[file:./config/simulation-charmander.json][Charmander]] (see [[#sec:charmander][here]])
- [[file:./config/simulation-charmander-contemporaneous.json][Charmander with a contemporaneous sample]]
- [[file:./config/simulation-charmeleon.json][Charmeleon]] (see [[#sec:charmeleon][here]])

There is a schema for valid described [[file:./config/readme.org][here]].

** Building the database

To generate the database, run the main script.

#+begin_src sh
 python main.py <path/to/config.json>
#+end_src

** Using the database

The following demonstrates how to use the database. Don't forget to
close the database connection after using it!

#+begin_src python
db_conn = h5py.File("dataset.hdf5")
for k in db_conn.keys():
    out_grp = db_conn[k]['output']
    r0_vals = out_grp['parameters']['r0']['values'][()]
    r0_chng = out_grp['parameters']['r0']['change_times'][()]
    prev = out_grp["present_prevalence"][()]
    print(f"Record {k} prevalence {prev}")
    tree = pickle.loads(db_conn[k]['input']['tree'][...].tobytes())
db_conn.close()
#+end_src

** Conda environment

A conda environment to run this simulation can be created from the
=environment.yaml= file by running the following command:

#+begin_src sh
  conda env create -f environment.yaml
#+end_src

* Datasets

There are a sequence of configurations: /Charmander/, /Charmeleon/ and
/Charizard/. These all use the same model but are of increasing size
and use broader distributions over the simulation parameters.

** Charmander
:properties:
:custom_id: sec:charmander
:end:

This is intended as a toy dataset. It has a 800-100-100
training-validation-testing split. The parameters are nearly constant
through time, for example, the $R_0$ values are shown in Figure
[[fig:charmander-r0s]]. The configuration for this simulation is
[[file:./config/simulation-charmander.json][simulation-charmander.json]].

#+caption: The reproduction number through time in a subsample of the Charmander simulations.
#+name: fig:charmander-r0s
#+attr_org: :width 500px
#+attr_html: :width 400px
[[./out/sim-charmander/plots/r0_trajectories.png]]

** Charmander contemporaneous

This is very similar to the [[#sec:charmander][Charmander]] configuration but instead of
serial sampling, there is a single contemporaneous sample at the
present.

** Charmeleon
:properties:
:custom_id: sec:charmeleon
:end:

This is intended as a small dataset. It has a 1600-200-200
training-validation-testing split. The parameters vary significantly
through time, for example, the $R_0$ values are shown in Figure
[[fig:charmeleon-r0s]]. The configuration for this simulation is
[[file:./config/simulation-charmeleon.json][simulation-charmeleon.json]].

#+caption: The reproduction number through time in a subsample of the Charmeleon simulations.
#+name: fig:charmeleon-r0s
#+attr_org: :width 500px
#+attr_html: :width 400px
[[./out/sim-charmeleon/plots/r0_trajectories.png]]

* Notes

1. Activate the =derp= environment in conda and run =python main.py
   config/debugging.json= to run the debugging example. This will
   produce a bunch of pickle files, each containing a single record of
   the dataset and a HDF5 file which contains the pickled trees as
   binary blobs and the various parameters and statistics that we
   might be interested in estimating from those trees. The relevant
   files are all defined at the start of =main.py= as global variables
   read from the configuration JSON file.
2. To set up BEAST2 to do the simulation you can run the
   =src/setuplib.sh= script which will download BEAST2. Run =python
   clean.py= to remove output to start again fresh. Run =bash
   src/housekeeping.sh= to update =environment.yaml= and lint the
   code.
3. If you want a GUI to inspect the output HDF5 file, the [[https://github.com/HDFGroup/hdf-compass][HDFCompass]]
   tool provides a simple way to inspect the data that has been
   generated. There is some basic information about the simulation
   stored as attributes in the HDF5 file. This includes the date of
   creation and the size of the dataset.
