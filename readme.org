#+title: DERP: Deep recursive parameter estimation
#+author: Alexander E. Zarebski

This repository contains the code to simulate a database of
phylogenetic trees that will be used in a machine learning project in
which a neural network will be trained to solve phylodynamics
problems.

* Roadmap

- [-] Provide a single database file and some helper functions to read
  trees out and their associated metadata.
  + [X] Establish the prior distribution to draw simulation parameters
    from, these will need to be sufficiently large to cover the range
    of plausible values for the use cases.
  + [ ] Estimate an appropriate size of the database, we can use
    10,000 as a working number of samples.
  + [-] Store the trees and metadata in a single database file.
    * [X] Write a function that simulates the simulation parameters:
      - number of rate changes
      - duration of epidemic
      - birth, death and sampling rates
    * [X] Write a function that takes the metadata and simulates an
      epidemic with remaster.
      - [X] the remaster template file to run the simulation
      - [X] the code to load the simulation parameters into the
        template
    * [ ] Write a function that processes the epidemic simulation to
      extract the desired features: prevalence, reproduction number,
      and cumulative infections.
    * [ ] Write a function that loads all the data from one simulation
      into the database.
  + [ ] Write some helper functions to read data out of the database
    in an efficient way.
  + [ ] Document how to use the database file and heler functions.
  + [ ] Put a CLI on the =main.py= script.

* Notes

1. Activate the =derp= environment in conda and run =python main.py=
   to run the whole compute. This will produce a bunch of pickle
   files, each containing a single record of the dataset and a HDF5
   file which contains the pickled trees as binary blobs and the
   various parameters and statistics that we might be interested in
   estimating from those trees. The relevant files are all defined at
   the start of =main.py= as global variables.
2. Run =python clean.py= to remove output to start again fresh. Run
   =black main.py= to lint the main script.
