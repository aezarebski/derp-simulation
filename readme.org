#+title: DERP Simulation
#+author: Alexander E. Zarebski

This repository contains the code to simulate a database of
phylogenetic trees that will be used in a machine learning project in
which a neural network will be trained to solve phylodynamics
problems.

* Usage

** Timelines

Figure [[fig:timelines]] shows a schematic of the timelines involved in a
simulation. There are two main time points that we use to define
times. The /origin/ is the start time of the simulation and the
/present/ is the time of the last sequenced sample. Times may be
measured either /forward/ increasing into the future, or /backward/
increasing into the past.

Note that the measurement times are randomly sampled between the
origin and the present and are measured in forwards time (i.e. zero at
the origin increasing towards the present.)

#+name: fig:timelines
#+attr_org: :width 500px
#+attr_html: :width 400px
[[./timelines.png]]

** Getting started generating a database

To generate the database, run the main script:

#+begin_src sh
 python main.py <path/to/config.json>
#+end_src

If you want a small example to test this out, try using the
=config/debugging.json= file. The whole simulation is configured by
the JSON file provided at the command line.

*** Optional monitoring progress

Making a large database takes a while. There is a tool in
=src/monitor.py= which you can run and it will report on the progress
of a current database construction and give a (rough) estimate of the
remaining time for each stage of the simulation.

#+begin_src sh
 python src/monitor.py <path/to/config.json>
#+end_src

** Configuring a simulation

The way in which a dataset is simulated is configured with a JSON
file. There is a schema for valid configurations described [[file:./config/readme.org][here]]. There
are some example configurations provided:

- [[file:./config/debugging.json][debugging]]
- [[file:./config/simulation-charmander.json][Charmander]]
- [[file:./config/simulation-charmander-contemporaneous.json][Charmander with a contemporaneous sample]]
- [[file:./config/simulation-charmeleon.json][Charmeleon]]
- [[file:./config/simulation-charizard.json][Charizard]]

Additional information about these datasets is given [[file:./config/readme.org][here]].

** Visualising the data

Two scripts, =visualisation.py= and =visualisation_temporal.py= can be
used to visualise the output of a simulation.

#+begin_src sh
 python visualisation.py <path/to/config.json>
 python visualisation_temporal.py <path/to/config.json>
#+end_src

Note that the latter only applies for simulations which are configured
to report temporal data (that is, =report_temporal_data= is set to
=true= in the config).

** Database structure

The database is an HDF5 file. Each simulation is represented with a
group with a name of the form =record_xxxxxx=, e.g. =record_000123=.
The data from each simulation is split into two groups: =input= and
=output=.

*** Input

The =input= group has the following datasets:

- =present= :: the time since the origin of the last sequenced sample
- =tree_height= :: the time between the $T_{\text{MRCA}}$ and the
  present
- =tree= :: a binary blob which is the pickled reconstructed tree of
  the sequenced samples in the simulation.

*** Output

The =output= group contains a lot of measurements, but the most
important is the =temporal_measurements= dataset. The
=temporal_measurements= dataset has the following columns:

- =measurement_times= (float) :: the (forward) time since the origin
  of the measurements
- =prevalence= (int) :: the number of infected individuals
- =cumulative= (int) :: the cumulative number of infections
- =reproductive_number= (float) :: the reproduction number

** Using the database

The following demonstrates how to use the database in Python. Don't
forget to close the database connection after using it! The following
script reads in the tree and measurements from a simulation and
produces [[file:./out/sim-charmander/demo-measurements.csv][this CSV file]] and the figure below.

#+begin_src python :tangle src/demo-database-usage.py
from Bio import Phylo
import h5py
import pickle
import matplotlib.pyplot as plt
import numpy as np

hdf5_file = "../out/sim-charmander/dataset-charmander.hdf5"

db_conn = h5py.File(hdf5_file)

demo_tree = pickle.loads(db_conn['record_000001/input/tree'][...].tobytes())
fig, ax = plt.subplots()
Phylo.draw(demo_tree, do_show=False, axes=ax)
fig.savefig('../out/sim-charmander/plots/demo-tree.png')

measurements = db_conn['record_000001/output/parameters/temporal_measurements'][...]
column_names = measurements.dtype.names
np.savetxt('../out/sim-charmander/demo-measurements.csv',
           measurements, delimiter=',',
           header=','.join(column_names))

db_conn.close()
#+end_src

#+caption: Example reconstructed tree from Charmander database.
#+name: fig:thing
#+attr_org: :width 500px
#+attr_html: :width 400px
[[./out/sim-charmander/plots/demo-tree.png]]

If you want a GUI to inspect the output HDF5 file, the [[https://github.com/HDFGroup/hdf-compass][HDFCompass]] tool
provides a simple way to inspect the data that has been generated.
There is some basic information about the simulation stored as
attributes in the HDF5 file. This includes the date of creation and
the size of the dataset.

* FAQs

** How do I set up a reproducible environment?

There is a requirements file to install the relevant python packages

#+begin_src sh
  python3 -m venv venv
  source venv/bin/activate
  pip install -U pip
  pip install -r requirments.txt
#+end_src

** How do I install BEAST2?

BEAST2 is used to simulate the data. If you don't have BEAST2
installed, there is a script =scr/setupbeast2.sh= which will download
and install this for you. This script will install =remaster=. If you
don't want to use the script, once you have BEAST2 installed, you will
need to install [[https://tgvaughan.github.io/remaster/][remaster]] through BEAUti.

** How do I install the =Bio= module?

#+begin_src sh
  pip install biopython
#+end_src

** How do I install the =<python_package>= package?

#+begin_src src
  pip install biopython h5py lxml pandas plotnine
#+end_src
